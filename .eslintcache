[{"/Users/sarthak/Documents/EgenSolutions/my-app/src/index.js":"1","/Users/sarthak/Documents/EgenSolutions/my-app/src/App.js":"2","/Users/sarthak/Documents/EgenSolutions/my-app/src/reportWebVitals.js":"3","/Users/sarthak/Documents/EgenSolutions/my-app/src/Home/Home.js":"4","/Users/sarthak/Documents/EgenSolutions/my-app/src/JobDescription/JobDescription.js":"5","/Users/sarthak/Documents/EgenSolutions/my-app/src/Header/Header.js":"6","/Users/sarthak/Documents/EgenSolutions/my-app/src/AppContext/AppContext.js":"7"},{"size":500,"mtime":1607122038420,"results":"8","hashOfConfig":"9"},{"size":900,"mtime":1607305580114,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1607122038422,"results":"11","hashOfConfig":"9"},{"size":5793,"mtime":1607297660066,"results":"12","hashOfConfig":"9"},{"size":3630,"mtime":1607305046772,"results":"13","hashOfConfig":"9"},{"size":967,"mtime":1607185877478,"results":"14","hashOfConfig":"9"},{"size":166,"mtime":1607283562790,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"lrta8j",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sarthak/Documents/EgenSolutions/my-app/src/index.js",[],["33","34"],"/Users/sarthak/Documents/EgenSolutions/my-app/src/App.js",[],"/Users/sarthak/Documents/EgenSolutions/my-app/src/reportWebVitals.js",[],"/Users/sarthak/Documents/EgenSolutions/my-app/src/Home/Home.js",["35"],"import React, { useState,useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport './Home.css'\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Switch from '@material-ui/core/Switch';\nimport axios from 'axios'\n\n//import WbIncandescentIcon from '@material-ui/icons/WbIncandescent';\n//import Brightness3Icon from '@material-ui/icons/Brightness3';\n\n\nconst Home = (props)=>{\n\n    const inlineStyle={\n        textDecoration:\"none\"\n    }\n\n    const [state, setState] = React.useState({\n        checkedB: true\n      });\n    const [mode,setMode] = useState(true);\n    const [positions,setPositions] = useState([]);\n    const [description,setDescription] = useState(\"\");\n    //const [jobDetails,setJobDetails] = useState(\"\");\n    const [jobLocation,setJobLocation] = useState(\"\");\n    const [start,setStart] = useState(true);\n\n\n    const handleChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n        setMode(!mode);\n    };\n\n    useEffect(() => {\n        if(mode === true)\n            document.title = \"Github Jobs | Light\"\n        else\n            document.title = \"Github Jobs | Dark\"\n      });\n\n      const handleLocationFilter = (event)=>{\n        setJobLocation(event.target.value);\n      }\n      const handleDescriptionFilter = (event)=>{\n        setDescription(event.target.value);\n      }\n\n      const getJobsByDescription = ()=>{\n        if(description ===\"\"){\n            getPositions()\n        }\n        else{\n        axios.get(\n            \"/positions.json?description=\"+description,\n            )\n            .then(result=>{\n                setPositions(JSON.parse(JSON.stringify((result.data))));\n            })\n        }\n      }\n\n      const getJobsByLocation = ()=>{\n        if(jobLocation ===\"\"){\n            getPositions()\n        }\n        else{\n        axios.get(\n            \"/positions.json?location=\"+jobLocation,\n            )\n            .then(result=>{\n                setPositions(JSON.parse(JSON.stringify((result.data))));\n            })\n        }\n      }\n\n      const getJobsByFilter = ()=>{\n        if(jobLocation ===\"\" && description === \"\"){\n            getPositions()\n        }\n        if(jobLocation ===\"\" && description !== \"\"){\n            getJobsByDescription()\n        }\n        if(description === \"\" && jobLocation !== \"\"){\n            getJobsByLocation()\n        }\n        else{\n            axios.get(\n                \"/positions.json?location=\"+jobLocation,\n                )\n                .then(result=>{\n                    setPositions(JSON.parse(JSON.stringify((result.data))));\n                }) \n            }\n        }\n\n        React.useEffect(() => {\n            axios.get(\n                \"/positions.json?search=node\",\n                )\n                .then(result=>{\n                setPositions(JSON.parse(JSON.stringify((result.data))));\n            })\n      },[start]);\n\n\n      const GetJobDescription =(id)=>{\n        axios.get(\n            \"/positions/\"+id+\".json?markdown=true\",\n            )\n            .then(result=>{\n                props.onChange(JSON.parse(JSON.stringify(result.data)));\n            })\n      }\n\n\n      const getPositions = ()=>{\n            axios.get(\n                    \"/positions.json?search=node\",\n                    )\n                    .then(result=>{\n                    setPositions(JSON.parse(JSON.stringify((result.data))));\n                })\n            console.log(positions);\n      }\n\n    return(\n        <div className={\"panelPage\"+(state.checkedB === true?\"light\":\"dark\")}>\n            {/* <JobDescription allDetails={jobDetails}/> */}\n            <div className=\"headerlight\">\n            <div className=\"filter\">\n                <span>\n                    <SearchIcon/>\n                    <input type=\"text\" placeholder=\"Filter by Job Title, Name, Companies\" onChange={handleDescriptionFilter} className=\"enterJob\"></input>\n                </span>\n                <span>\n                    <LocationOnIcon/>\n                    <input type=\"text\" placeholder=\"Filter by Location\" onChange={handleLocationFilter} className=\"enterJob\"></input>\n                </span>\n                <button class=\"findJobButton\" onClick={getJobsByFilter}>Search</button>\n                <span>\n                    {/* <Brightness3Icon className=\"darkIcon\"></Brightness3Icon> */}\n                    <Switch\n                     className=\"toggle\"\n                     checked={state.checkedB}\n                     onChange={handleChange}\n                     name=\"checkedB\"\n                     color=\"primary\">\n                    </Switch>\n                    {/* <WbIncandescentIcon/> */}\n                    <label className=\"timePosted\">{(mode ===  true ?\"Light\":\"Dark\")+\" Mode\"}</label>\n                </span>\n            </div>\n            </div>\n            <div className=\"details\">\n            {positions.map((job) => (\n                <Link style={inlineStyle} to=\"/jobDescription\">\n                    <div className=\"jobBlock\" value={job.id} onClick={()=>GetJobDescription(job.id)}>\n                    <img src={job.company_logo} className=\"logos\" alt=\"\"></img>\n                    <label className=\"timePosted\">{job.type}</label>\n                    <label className={\"jobTitle\"+(state.checkedB === true?\"light\":\"dark\")}>{job.title}</label>\n                    <label className=\"timePosted\">{job.company}</label>\n                    <label className=\"jobLocation\">{job.location}</label>\n                    </div>\n               </Link>\n                ))}\n                <div>\n                    <button className=\"load\" onClick={getPositions}>Load Jobs</button>\n                </div> \n            </div>\n        </div>\n        \n    );\n}\n\nexport default Home;","/Users/sarthak/Documents/EgenSolutions/my-app/src/JobDescription/JobDescription.js",["36"],"import React from 'react';\nimport '../Home/Home.css'\nimport './JobDescription.css'\nimport Switch from '@material-ui/core/Switch';\nimport {useState,useEffect} from 'react'\n\n\nconst JobDescription = (props)=>{\n\n    const inlineStyle={\n        marginLeft:\"0px\"\n    }\n    const marginStyle={\n        marginLeft:\"auto\"\n    }\n\n    const [state, setState] = React.useState({\n        checkedB: true\n        \n      });\n      const[mode,setMode] = useState(true);\n\n      const handleChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n        setMode(!mode);\n      };\n\n      const howtoapply = (data) =>{\n          window.alert(data.allDetails.how_to_apply)\n      }\n      \n\n      useEffect(() => {\n        if(mode === true)\n            document.title = \"Github Jobs | Light\"\n        else\n            document.title = \"Github Jobs | Dark\"\n      });\n    return(\n       \n        <div className={\"panelPage\"+(state.checkedB === true?\"light\":\"dark\")}>\n            {console.log(props)}\n            <div className=\"headerlight\">\n                <div className={\"jobName\"+(state.checkedB === true?\"light\":\"dark\")}>\n                        <img className=\"logos\" src={props.allDetails.company_logo} alt=\"\"></img>\n                        <label className={\"jobTitle\"+(state.checkedB === true?\"light\":\"dark\")} style={inlineStyle}>{props.allDetails.company}</label>\n                        <label className=\"jobLocation\" style={inlineStyle}>{props.allDetails.location}</label>\n                        <button className=\"apply\" onClick={()=>(window.open(props.allDetails.company_url,\"_blank\"))}>Company Site</button>\n                </div>\n                <span className=\"toggleSwitch\">\n                    {/* <Brightness3Icon className=\"darkIcon\"></Brightness3Icon> */}\n                    <Switch\n                     className=\"toggle\"\n                     checked={state.checkedB}\n                     onChange={handleChange}\n                     name=\"checkedB\"\n                     color=\"primary\">\n                    </Switch>\n                    {/* <WbIncandescentIcon/> */}\n                    <label className=\"timePosted\">{(mode ===  true ?\"Light\":\"Dark\")+\" Mode\"}</label>\n                </span>\n            </div>\n\n            <div className={\"description\"+(state.checkedB === true?\"light\":\"dark\")}>\n                <label className={\"jobTitle\"+(state.checkedB === true?\"light\":\"dark\")} style={inlineStyle}>{props.allDetails.title}</label>\n                <label className=\"timePosted\" style={inlineStyle}>{props.allDetails.type}</label>\n                <label className=\"timePosted\" style={inlineStyle}>{props.allDetails.company}</label>\n                <label className=\"jobLocation\" style={inlineStyle}>{props.allDetails.location}</label>\n\n                    <button className=\"apply\" onClick={()=>howtoapply(props)}>Apply</button>\n\n                <div className=\"jobDetails\">\n                    <p className={\"info\"+(state.checkedB === true?\"light\":\"dark\")}>\n                    {props.allDetails.description}\n                    </p>\n                </div>\n                <div className=\"howtoapply\">\n                    <label className=\"heading\">How to apply</label>\n                    <p className={\"info\"+(state.checkedB === true?\"light\":\"dark\")}>\n                        {props.allDetails.how_to_apply}\n                    </p>\n                </div>\n                <div>\n                    <button className=\"apply1\" onClick={()=>howtoapply(props)}>Apply to Job</button>\n                </div>\n            </div>\n        </div>\n     \n    );\n\n}\nexport default JobDescription;","/Users/sarthak/Documents/EgenSolutions/my-app/src/Header/Header.js",[],"/Users/sarthak/Documents/EgenSolutions/my-app/src/AppContext/AppContext.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":27,"column":18,"nodeType":"43","messageId":"44","endLine":27,"endColumn":26},{"ruleId":"41","severity":1,"message":"45","line":13,"column":11,"nodeType":"43","messageId":"44","endLine":13,"endColumn":22},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'setStart' is assigned a value but never used.","Identifier","unusedVar","'marginStyle' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]